# =================================================================
# CI/CD Pipeline: React Calculator - Firebase Deploy
# =================================================================
# Este workflow implementa un pipeline completo de CI/CD con 5 etapas:
# 1. Code Quality & Linting - Verifica est√°ndares de c√≥digo
# 2. Build & Test - Construye la aplicaci√≥n y ejecuta tests unitarios  
# 3. Integration Tests - Ejecuta tests de integraci√≥n
# 4. Regression Tests - Ejecuta tests de regresi√≥n
# 5. Manual Approval - Gate de aprobaci√≥n manual para producci√≥n
# 6. Deploy to Firebase - Despliega a Firebase Hosting
# =================================================================

name: React Calculator - Firebase Deploy

# TRIGGERS: Cu√°ndo se ejecuta el workflow
# - Pull Request hacia la rama 'develop'
on:
  pull_request:
    branches: [feature/Pruebas, develop, test, production]

# PERMISOS: Qu√© puede hacer este workflow en GitHub
permissions:
  contents: read          # Leer contenido del repositorio
  checks: write          # Escribir checks de estado
  statuses: write        # Escribir estados de commit
  pull-requests: write   # Escribir comentarios en PRs

jobs:
  # =================================================================
  # ETAPA 1: CALIDAD DE C√ìDIGO
  # =================================================================
  # Prop√≥sito: Verificar que el c√≥digo cumple con est√°ndares de calidad
  # - ESLint: Detecta errores de sintaxis y problemas de c√≥digo
  # - Prettier: Verifica que el formato del c√≥digo sea consistente
  # =================================================================
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.head_ref, 'feature/') }}
    defaults:
      run:
        working-directory: ./calculadora-react
    
    steps:
    # Descarga el c√≥digo fuente del repositorio
    - name: Checkout code
      uses: actions/checkout@v4

    # Configura Node.js v20 con cache de npm para acelerar builds
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: calculadora-react/package-lock.json

    # Instala dependencias usando npm ci (m√°s r√°pido y determinista que npm install)
    - name: Install dependencies
      run: npm ci

    # Ejecuta ESLint para detectar errores de c√≥digo y problemas de estilo
    - name: Run ESLint
      run: npm run lint

    # Verifica que el c√≥digo est√© formateado seg√∫n las reglas de Prettier
    - name: Check Prettier formatting
      run: npm run format:check

  # =================================================================
  # ETAPA 2: BUILD Y TESTS UNITARIOS  
  # =================================================================
  # Prop√≥sito: Construir la aplicaci√≥n y ejecutar tests unitarios
  # - Compila el c√≥digo TypeScript/JavaScript
  # - Ejecuta tests unitarios con cobertura
  # - Genera build de producci√≥n
  # - Guarda artifacts para etapas posteriores
  # =================================================================
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: approve-develop-to-test-manual
    if: ${{ github.head_ref == 'develop' || github.base_ref == 'test' }}
    defaults:
      run:
        working-directory: ./calculadora-react
    
    steps:
    # Descarga el c√≥digo fuente
    - name: Checkout code
      uses: actions/checkout@v4

    # Configura entorno Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: calculadora-react/package-lock.json

    # Instala dependencias
    - name: Install dependencies
      run: npm ci

    # Ejecuta tests unitarios con reporte de cobertura
    - name: Run tests
      run: npm test -- --coverage --watchAll=false

    # Construye la aplicaci√≥n para producci√≥n
    - name: Build application
      run: npm run build

    # Guarda los archivos compilados como artifacts para uso en deploy
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: react-build-${{ github.sha }}
        path: calculadora-react/build/
        retention-days: 5

  # =================================================================
  # ETAPA 3: TESTS DE INTEGRACI√ìN
  # =================================================================
  # Prop√≥sito: Verificar que los componentes funcionen bien juntos
  # - Tests que simulan flujos completos de usuario
  # - Validaci√≥n de interacciones entre componentes
  # - Verificaci√≥n de workflows complejos
  # =================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-test, approve-develop-to-test-manual] # Solo se ejecuta si build-and-test pasa exitosamente
    if: ${{ github.head_ref == 'develop' || github.base_ref == 'test' }}
    defaults:
      run:
        working-directory: ./calculadora-react
    
    steps:
    # Descarga el c√≥digo fuente
    - name: Checkout code
      uses: actions/checkout@v4

    # Configura entorno Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: calculadora-react/package-lock.json

    # Instala dependencias
    - name: Install dependencies
      run: npm ci

    # Ejecuta tests de integraci√≥n espec√≠ficamente
    # Filtra solo tests que contienen "Integration" en el nombre
    - name: Run integration tests
      run: npm test -- --testNamePattern="Integration" --watchAll=false --verbose

  # =================================================================
  # ETAPA 4: TESTS DE REGRESI√ìN
  # =================================================================
  # Prop√≥sito: Verificar que los cambios no rompan funcionalidad existente
  # - Tests que validan que features anteriores sigan funcionando
  # - Detecci√≥n de regresiones en funcionalidad cr√≠tica
  # - Validaci√≥n de compatibilidad hacia atr√°s
  # =================================================================
  regression-tests:
    name: Regression Tests
    runs-on: ubuntu-latest
    needs:  [integration-tests, approve-develop-to-test-manual] 
    if: ${{ github.head_ref == 'develop' || github.base_ref == 'test' }}
    defaults:
      run:
        working-directory: ./calculadora-react
    
    steps:
    # Descarga el c√≥digo fuente
    - name: Checkout code
      uses: actions/checkout@v4

    # Configura entorno Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: calculadora-react/package-lock.json

    # Instala dependencias
    - name: Install dependencies
      run: npm ci

    # Ejecuta tests de regresi√≥n espec√≠ficamente  
    # Filtra solo tests que contienen "Regression" en el nombre
    - name: Run regression tests
      run: npm test -- --testNamePattern="Regression" --watchAll=false --verbose

  # =================================================================
  # ETAPA 5: GATE DE APROBACI√ìN MANUAL
  # =================================================================
  # Prop√≥sito: Punto de control humano antes del despliegue a producci√≥n
  # - Requiere aprobaci√≥n manual de un reviewer autorizado
  # - Pausa el pipeline hasta que alguien apruebe el despliegue
  # - Permite revisar resultados de tests antes de producci√≥n
  # - Implementa governance y control de cambios
  # 
  # CONFIGURACI√ìN REQUERIDA:
  # 1. Ir a Settings > Environments en GitHub
  # 2. Crear environment "production" 
  # 3. Configurar "Required reviewers"
  # =================================================================
  approval-test-to-production:
    name: Approve Deployment
    runs-on: ubuntu-latest
    # CONDICIONES: Se ejecuta solo en ramas principales o PRs hacia develop
    if: ${{ github.head_ref == 'test' }}
    environment: production  # Activa el gate de aprobaci√≥n manual configurado en GitHub
    
    steps:
    # Muestra resumen de √©xito y espera aprobaci√≥n manual
    - name: Manual approval checkpoint
      run: |
        echo "‚úÖ ¬°TODOS LOS TESTS PASARON EXITOSAMENTE!"
        echo "================================"
        echo "‚úÖ Code Quality & Linting: PASSED"
        echo "‚úÖ Unit Tests: PASSED" 
        echo "‚úÖ Integration Tests: PASSED"
        echo "‚úÖ Regression Tests: PASSED"
        echo "================================"
        echo "üöÄ LISTO PARA DESPLEGAR A PRODUCCI√ìN"
        echo ""
        echo "‚è≥ Esperando aprobaci√≥n manual..."
        echo "üìù Un reviewer autorizado debe aprobar este despliegue"

  approve-develop-to-test-manual:
    name: Manual Approval Develop ‚Üí Test
    runs-on: ubuntu-latest
    if: ${{ github.head_ref == 'develop' || github.base_ref == 'test'}}
    environment: production
    steps:
    - name: Manual approval checkpoint
      run: |
        echo "‚úÖ Code Quality PASO"
        echo "===================================="
        echo "üöÄ LISTO PARA EJECUTAR UNIT, INTEGRATION Y REGRESSION TESTS EN TEST"
        echo "‚è≥ Esperando aprobaci√≥n manual..."
        echo "üìù Un reviewer autorizado debe aprobar este paso"
  # =================================================================
  # ETAPA 6: DESPLIEGUE A FIREBASE HOSTING
  # =================================================================
  # Prop√≥sito: Despliega la aplicaci√≥n a Firebase Hosting en producci√≥n
  # - Descarga los artifacts generados en la etapa de build
  # - Despliega al canal 'live' de Firebase Hosting
  # - Usa service account para autenticaci√≥n segura
  # - Solo se ejecuta despu√©s de aprobaci√≥n manual
  # =================================================================
  deploy-firebase:
    name: Deploy to Firebase
    needs: approval-test-to-production # Solo se ejecuta despu√©s de aprobaci√≥n manual
    runs-on: ubuntu-latest
    # CONDICIONES: Mismas que approval-gate para consistencia
    if: ${{ github.head_ref == 'test' }}
    defaults:
      run:
        working-directory: ./calculadora-react
    
    steps:
    # Descarga el c√≥digo fuente (necesario para archivos de configuraci√≥n)
    - name: Checkout code
      uses: actions/checkout@v4
      
    # Construye la aplicaci√≥n para producci√≥n
    - name: Build application
      run: npm run build

    # Guarda los archivos compilados como artifacts para uso en deploy
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: react-build-${{ github.sha }}
        path: calculadora-react/build/
        retention-days: 5
        
    # Descarga los artifacts de build generados en la etapa build-and-test
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: react-build-${{ github.sha }}
        path: calculadora-react/build/

    # Despliega a Firebase Hosting usando service account
    # - projectId: ID del proyecto Firebase
    # - channelId: 'live' significa producci√≥n (vs preview channels)
    # - firebaseServiceAccount: Credenciales seguras almacenadas en GitHub Secrets
    - name: Deploy to Firebase Hosting
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_CALCULADORA_REACT_TP7 }}
        projectId: calculadora-react-tp7
        channelId: live
        entryPoint: ./calculadora-react

# =================================================================
# RESUMEN DEL PIPELINE:
# =================================================================
# 
# FLUJO COMPLETO:
# 1. Code Quality (ESLint + Prettier) 
#    ‚Üì 
# 2. Build & Test (npm test + npm build)
#    ‚Üì
# 3. Integration Tests (flujos de usuario)
#    ‚Üì  
# 4. Regression Tests (detecci√≥n de regresiones)
#    ‚Üì
# 5. üõë MANUAL APPROVAL (control humano)
#    ‚Üì
# 6. üöÄ Deploy to Firebase (producci√≥n)
#
# BENEFICIOS:
# - ‚úÖ Calidad garantizada antes de producci√≥n
# - üîí Control de acceso con aprobaci√≥n manual  
# - üìä Cobertura completa de testing
# - üöÄ Despliegue automatizado pero controlado
# - üìù Trazabilidad completa del proceso
#
# =================================================================
